Flexbox:
- makes it easy to align elements to one another, in different directions and order
- main idea behind flexbox is to allow elements to shrink and expand in the available space
- replaces float layouts, uses less, more readable and logical code
- changes how we build 1D layouts

- to make something flex, give it display: flex;
  - element will become the flex container and all its direct children will become flex items
- the default main axis is horizontal and the vertical axis is called the cross axis (this flips if flex-direction: column)

Flex container properties:
- flex-direction: allows you to change which direction the main axis is. (default is row)
  - row/column reverse not only changes the direction but the starting point as well. 
  - for example: row-reverse will reverse the items order (right to left) and start the whole row on the right side of the screen rather than the left
- flex-wrap: determines if the flex items is allowed to go to a new row (default is nowrap)
- justify-content: determines where the flex items are positioned along the main axis (default is flex-start)
- align-items: determines where the flex items are positioned along the cross axis (default is stretch)
  - setting align-items to baseline will allow the bottom of text to line up evenly despite different sizes of text
  - having the default as stretch means that all the elements will match the height of the tallest element unless another height is predefined on an element
- align-content: if there are more than one row of flex items, this determines how they are aligned along the cross axis (default is stretch)
- flex can also align text

Flex items properties:
- align-self: similar to align-items but for an individual item (default is auto)
- order: defines specific order for item
  - the default is 0 for every flex item. 
  - if there are 4 items, they will all have order: 0; by default unless otherwise specified. (works like z-index)
    - if one of the items has -1 it will be first or if it has 1 it will be last
- flex-grow: allows you to decide how much a flex item can grow (default is 0)
  - number given is the multiplier for the distributed free space given
- flex-shrink: allows you to decide if a flex item can shrink (default is 1)
  - 1 means the element is allowed to shrink and act responsively. 0 doesnt let the element to shrink
- flex-basis: determines the base width of an item (default is auto)
  - even when this is given a px unit, it can still act responsively when flex-shrink is 1
- flex is a shorthand for the three properties above. flex: 0 1 auto; (flex-grow flex-shrink flex-basis)
- if a flex item is taking a part of the flex container (flex: 0 0 60%), the rest can be taken up with just flex: 1;

CSS variables (custom properties):
- variables inside of css without a preprocessor
- can be manipulated by js
- css variables cascade and are inherited
- must be within a scope (declaration block). usually the :root psuedo class
- :root - psuedo class with higher specificity than html used to add css variables that are available throughout the document
- starts with --
  Ex: --color-primary: #eb2f64;
- to use, wrap it in var()
  Ex: color: var(--color-primary);

SVG: scalable vector graphic
- better than using icon fonts because icon fonts are considered a hack and can fail. having svgs is more reliable
- easier to format. usually just needs height/width. fill for color
- sprite file: file that holds a bundle of svg images. helps to have one file (and one http request) instead of having one per svg
- to use svg/sprite files:
  - <svg> tag wrapping a <use> tag
  - to use the sprite file with the svg, the <use> tag must have the xlink:href attribute. inside this, reference the sprite file path then the svg name separated by a #
  Ex: 
  <svg>
    <use xlink:href="img/sprite.svg#icon-magnifying-glass"></use>
  </svg>
  - this only works on a web server
  - svgs, by default, are inline elements that act like text. therefore, they have a bit of line-height attached to them. this may cause them to not align perfectly with other flex siblings. In order to fix this, make the parent of the svg tags a flex container

- currentColor: uses the same value from the element's color attribute 
  Ex: div {
    color: red;
    border: 1px solid currentColor; (border will be red)
  }
  - if the color attribute isnt defined in the block, it will then inherit from its parent
  - works well with hover effects
  Ex: 
  .link {
    color: #fff;
  }

  .link:hover {
    color: blue;
  }

  .link-child {
    color: currentColor; 
  }
  - link-child will also change to blue on hover without having to write an extra hover block because of currentColor

Masks:
- a defined area where we can see through the element to see whats behind the element
- good for icons through CSS
Ex:
.list-icon {
  background-color: #eb2f64;
  mask-img: url(../img/chevron-thin-right.svg);
  maski-size: cover  
}
- this will first add a pink box, then the mask is the image (a chevron with a white background) so the final product will be a pink chevron with a white background
- the chevron is initially black, but with the mask, it becomes transparent and takes the pink color because of the bg color.




  MISC NOTES:
  - input elements do not inherit the font properties from the global styles from the document
  - z-index only works if it has a position specified (cant be default aka static)
  - images should always block or inline-block
  - with flexbox, margin: auto; allows you to create space without stretching the element
  - transition doesnt work on background images or gradients
Three pillars of good HTML and CSS: 
  1. Responsive design
    - fluid layouts
    - media queries
    - responsive images
    - correct units
    - desktop first vs mobile first

  2. Maintainable and scalable code
    - clean
    - easy to understand
    - growth
    - reusable
    - how to organize files
    - how to name classes
    - how to structure HTML

  3. Web performance
    - less HTTP requests
    - less code
    - compress code
    - use a CSS preprocessor
    - less images
    - compress images

CSS process when loading up a page:
  HTML:
  - loads HTML
  - parses HTML
  - HTML is loaded and creates DOM
  CSS:
  - CSS is loaded while HTML is being parsed
  - CSS is parsed 
    - resolves conflicting CSS declarations (cascade)
    - process final CSS values (percentages, rems, etc)
  - CSS is loaded and creates CSS object model (CSSOM)

  - with HTML and CSS loaded, the render tree is created
  - website rendering: visual formatting model
  - final rendered website

CSS Parsing:
1. Importance:
  - User !important declarations
  - Author !important declarations
  - Author declarations
  - User declarations
  - Default browser declarations
- If importance is the same, go to specificity

2. Specificity:
  - Inline styles
  - IDs
  - Classes, psuedo classes, attributes
  - Elements, psuedo elements
- If specificity is the same, go to source order

3. Source order (cascade)
  - the last declaration in the code will override all other declarations and will be applied

Unit conversion from relative to absolute (px):
- % (fonts): declared value * parents computed font size
- % (lengths): declared value * parents computed width
- em (fonts): declared value * parents computed font size
- em (lenghts): declared value * current element computed font size
- rem: declared value * root computed font size
- vh: declared value * 1% of viewport height
- vw: declared value * 1% of viewport width

- root font size should be set in html css block

Visual Formatting Model (VFM)
- Algorithm that calculates boxes and determines the layouts of these boxes, for each element in the render tree, in order to determine the final layout of the page
- to create the VFM, it takes into account:
  - dimensions of the boxes (box model)
  - box type (inline, block, inline block)
  - positioning scheme (floats and positioning)
  - stacking contexts
  - other elements in the render tree
  - viewport size, dimensions of images, etc

BEM:
- stands for Block Element Modifier
- organized way to name CSS classes
- Block: standalone component that is meaningful on its own
- Element: part of a block that has no standalone meaningful
- Modifier: a different version of a block or an element
- syntax: block__element--modifier

7-1 Pattern:
- 7 different folders for partial Sass (or any CSS preprocessor) files and 1 main Sass file to import all other files into a compiled CSS stylesheet
7 folders:
  - base: basic code for page. resets, typography, etc
  - components: used for components (resuseable building blocks) of the page
  - layout: global layout folder. footer, header, etc
  - pages: where specific pages go
  - themes
  - abstracts: code that doesnt output css. variables, mixins, etc
  - vendors: third party css files. bootstrap, etc

- files should start with an underscore
Ex: _base.scss
- then import those files into the main scss file with @import
  - doesnt need the underscore or file type when importing
Ex: @import "base/animations"

Sass vs SCSS
- difference is the syntax
  - SCSS uses brackets and indentation (preferred)
  .nav {
    color: blue;

    & li {
      color: white;
    }
  }

  - Sass only uses indentation
  .nav
    color: blue;

    & li
      color: white;
  
   
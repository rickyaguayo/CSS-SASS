Basic responsive design principles:

1. Fluid Layouts
  - to allow webpage to adapt to the current viewport width/height
  - use %, vh, or vw instead of px for elements that should adapt to viewport
  - use max-width instead of width
  - 3 types of layouts:
    1. Float layouts: old way of building layouts of all sizes using the float CSS property. Pretty outdated
    2. Flexbox: Modern way of laying out elements in a 1D row without using floats. Perfect for component layouts
    3. CSS Grid: For laying out element in a fully-fledged 2D grid. Perfect for page layouts and complex components

2. Responsive Units
  - use rem instead of px for most lengths
  - to make it easy to scale the entire layout down or up automatically

3. Flexible Images
  - by default, images dont scale automatically as we change the viewport, so we need to fix that
  - always use % for image dimensions together with the max-width property

4. Media Queries
  - to change CSS styles on certain viewport widths (breakpoints)

calc() - powerful CSS function that allows you to to calculations in CSS
  - in regular CSS, you cannot mix units when doing calculations but you can in sass because sass is later compiled
  - if using a variable in calculations, you must wrap it in #{}
  Ex: 
  .row {
    width: calc((100% - #{gutter-horizontal}) / 2)
  }

- background-clip: determines where the elements background extends
  - with background-clip: text; paired with color: transparent; you can use an image, linear gradient, etc as the text color

- perspective: determines the distance between the z plane and the user
  - the smaller, the closer the element will appear

- to merge two background images in css, use background-image and put both images separated by a comma. 
  - background-blend-mode helps to blend the two in different ways
  - gradients are considered background images so you can use these to blend as well
  Ex:
  .bg {
    background-image: linear-gradient(
        to right bottom,
        $color-secondary-light,
        $color-secondary-dark
      ),
      url(../img/nat-5.jpg);
    background-blend-mode: screen;
  }

- box-decoration-break: specifies how an elements fragments should be rendered when broken across multiple lines, columns, and pages

- shape-outside: defines where the content floats around an element
  - must be used with float
  - must have a defined height/width
  - cannot be used with flexbox
  syntax: shape-outside: circle(50% at 50% 50%)
    - first number is for radius
    - second is x coordinate
    - third is y coordinate
  Ex: .text {
    width: 15rem;
    height: 15rem;
    float: left;
    shape-outside: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
  }

- video html element allows you to add a video to your site
  - has keywords for controls like autoplay, muted, loop, etc
  - should use multiple source elements inside to account for most browsers with src and type attributes (src attribute shouldnt go in the video tag)
  - should also add text in case the video cannot load
  Ex: 
  <video class="bg-video__content" autoplay muted loop>
    <source src="img/video.mp4" type="video/mp4">
    <source src="img/video.webm" type="video/webm">
    Your browser is not supported!
  </video>

- object-fit: helps html elements fit into its container like background-size

- solid color gradient: creating an abrupt gradient using linear gradient.
  Ex: 
  .book {
    background-image: linear-gradient(
        105deg,
        rgba($color-white, 0.9) 49.9%,
        transparent 50%
      ),
      url(../img/nat-10.jpg);
  }
  - this creates a solid white diagonal left side and abruptly changes to transparent. so there is no real gradient, but calls for a cool effect.

- :invalid psuedo class allows you to adjust stylings when a form input is invalid
  - must be placed on the focus state
  Ex: input:focus:invalid {
    border: 1px solid red;
  }
- :placeholder will let you style the placeholder text of an input
- :placeholder-shown will let you style the input itself while showing the placeholder


MISC NOTES:
- best way to move a floated element around is transform: translate(); rather than margins or paddings
- background-size: can also take numbers
  Ex: background-size: 75%;
- position: absolute doesnt NEED to have its parent be relative, the position just has to be specified. relative is just usually recommended